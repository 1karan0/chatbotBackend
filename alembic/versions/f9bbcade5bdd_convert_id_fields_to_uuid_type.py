"""Convert ID fields to UUID type

Revision ID: f9bbcade5bdd
Revises: 68c84672c8a5
Create Date: 2025-10-10 10:47:52.176717

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f9bbcade5bdd'
down_revision: Union[str, Sequence[str], None] = '68c84672c8a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    op.drop_index(op.f('conversations_botId_sessionId_idx'), table_name='conversations')
    op.drop_index(op.f('conversations_userId_idx'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('users_email_idx'), table_name='users')
    op.drop_index(op.f('users_email_key'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('knowledge_base_botId_status_idx'), table_name='knowledge_base')
    op.drop_table('knowledge_base')
    op.drop_index(op.f('bot_analytics_botId_date_key'), table_name='bot_analytics')
    op.drop_table('bot_analytics')
    op.drop_index(op.f('bots_apiKey_key'), table_name='bots')
    op.drop_index(op.f('bots_isPublic_status_idx'), table_name='bots')
    op.drop_index(op.f('bots_userId_idx'), table_name='bots')
    op.drop_table('bots')
    op.drop_index(op.f('themes_botId_key'), table_name='themes')
    op.drop_table('themes')
    op.alter_column('backendusers', 'tenant_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('knowledge_sources', 'tenant_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('tenants', 'tenant_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tenants', 'tenant_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('knowledge_sources', 'tenant_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('backendusers', 'tenant_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.create_table('themes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('botId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('primaryColor', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('secondaryColor', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('backgroundColor', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fontSize', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('borderRadius', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('chatWidth', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('chatHeight', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('customCSS', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=False),
    sa.Column('fontFamily', postgresql.ENUM('Inter', 'Roboto', 'OpenSans', 'System', name='FontFamily'), server_default=sa.text('\'Inter\'::"FontFamily"'), autoincrement=False, nullable=False),
    sa.Column('chatPosition', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('bottomColor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('chatyourtextColor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('youryourtextColor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['botId'], ['bots.id'], name=op.f('themes_botId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('themes_pkey'))
    )
    op.create_index(op.f('themes_botId_key'), 'themes', ['botId'], unique=True)
    op.create_table('bots',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('avatar', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PUBLISHED', 'DEPLOYED', 'ARCHIVED', name='BotStatus'), server_default=sa.text('\'DRAFT\'::"BotStatus"'), autoincrement=False, nullable=False),
    sa.Column('isPublic', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('flows', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('intents', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('entities', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('deploymentUrl', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('apiKey', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('totalConversations', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('totalMessages', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('userId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='bots_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='bots_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('bots_userId_idx'), 'bots', ['userId'], unique=False)
    op.create_index(op.f('bots_isPublic_status_idx'), 'bots', ['isPublic', 'status'], unique=False)
    op.create_index(op.f('bots_apiKey_key'), 'bots', ['apiKey'], unique=True)
    op.create_table('bot_analytics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('botId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('conversations', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('messages', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('uniqueUsers', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['botId'], ['bots.id'], name=op.f('bot_analytics_botId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_analytics_pkey'))
    )
    op.create_index(op.f('bot_analytics_botId_date_key'), 'bot_analytics', ['botId', 'date'], unique=True)
    op.create_table('knowledge_base',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('botId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=False),
    sa.Column('filePath', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('fileSize', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mimeType', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sourceUrl', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PROCESSING', 'READY', 'FAILED', name='KnowledgeBaseStatus'), server_default=sa.text('\'PENDING\'::"KnowledgeBaseStatus"'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('TEXT', 'URL', 'FILE', name='KnowledgeBaseType'), server_default=sa.text('\'TEXT\'::"KnowledgeBaseType"'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['botId'], ['bots.id'], name=op.f('knowledge_base_botId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('knowledge_base_pkey'))
    )
    op.create_index(op.f('knowledge_base_botId_status_idx'), 'knowledge_base', ['botId', 'status'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('workspace', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tenantId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('users_email_key'), 'users', ['email'], unique=True)
    op.create_index(op.f('users_email_idx'), 'users', ['email'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('sessionId', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('userId', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('botId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('messages', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['botId'], ['bots.id'], name=op.f('conversations_botId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name=op.f('conversations_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('conversations_pkey'))
    )
    op.create_index(op.f('conversations_userId_idx'), 'conversations', ['userId'], unique=False)
    op.create_index(op.f('conversations_botId_sessionId_idx'), 'conversations', ['botId', 'sessionId'], unique=False)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    # ### end Alembic commands ###
